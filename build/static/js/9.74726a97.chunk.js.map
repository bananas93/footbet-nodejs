{"version":3,"sources":["components/Chat/subcomponents/ChatHeader/index.module.scss","components/Chat/subcomponents/ChatMessage/index.module.scss","components/Chat/subcomponents/ChatList/index.module.scss","components/Chat/index.module.scss","components/Chat/subcomponents/ChatHeader/index.js","components/Chat/subcomponents/ChatMessage/index.js","api/chat.js","components/Chat/subcomponents/ChatList/index.js","components/Chat/index.js","views/ChatPage/index.js"],"names":["module","exports","ChatHeader","name","toggleShowChat","className","style","chatTitle","type","closeButton","onClick","CloseOutlined","backgroundColor","icon","UserOutlined","chatUserName","ChatMessage","isPage","handleSendMessage","useState","message","setMessage","authorized","useContext","AuthContext","typingUsers","setTypingUsers","socket","SocketContext","sendMessage","useEffect","cleanup","emit","typing","window","addEventListener","on","data","removeEventListener","chatMessage","chatMessagePage","chatMessageTyping","map","user","index","length","chatMessageRow","id","onEnter","onChange","e","value","fontFamily","height","placeholder","disabled","chatMessageButton","SendOutlined","getMessages","a","token","getCookie","axios","get","process","headers","Authorization","ChatList","setUnreadedMessages","messages","setMessages","then","res","status","localStorage","setItem","JSON","stringify","chat","document","getElementById","scrollTo","scrollHeight","catch","console","error","msg","prevState","oldMsg","days","push","setTimeout","documentElement","overflow","chatList","chatListPage","day","fontWeight","moment","date","format","item","chatListMessage","chatListMessageMy","chatListWrapper","chatListWrap","chatListName","chatListText","chatListTime","createdAt","newMessage","Date","getTime","Chat","showChat","setShowChat","unreadedMessages","button","size","dot","MessageOutlined","color","fontSize","ChatPage"],"mappings":"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","file":"static/js/9.74726a97.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatTitle\":\"ChatHeader_chatTitle__WJPXV\",\"chatUserName\":\"ChatHeader_chatUserName__1TAYg\",\"closeButton\":\"ChatHeader_closeButton__2IYD4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatMessage\":\"ChatMessage_chatMessage__rbyZZ\",\"chatMessageRow\":\"ChatMessage_chatMessageRow__2y_dM\",\"chatMessageInput\":\"ChatMessage_chatMessageInput__ol-7E\",\"chatMessageEmoji\":\"ChatMessage_chatMessageEmoji__3ls4m\",\"chatMessageTyping\":\"ChatMessage_chatMessageTyping__2bCTW\",\"chatMessageButton\":\"ChatMessage_chatMessageButton__3dl94\",\"chatMessagePage\":\"ChatMessage_chatMessagePage__2kufA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat\":\"ChatList_chat__18vs5\",\"chatList\":\"ChatList_chatList__3va2e\",\"chatListMessage\":\"ChatList_chatListMessage__20VMr\",\"chatListMessageMy\":\"ChatList_chatListMessageMy__WOrl6\",\"chatListWrapper\":\"ChatList_chatListWrapper__k2YWW\",\"chatListTime\":\"ChatList_chatListTime__nquCK\",\"chatListWrap\":\"ChatList_chatListWrap__KfX5J\",\"chatListName\":\"ChatList_chatListName__8sx0G\",\"chatListPage\":\"ChatList_chatListPage__3KvQA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Chat_button__31vsn\"};","import { Avatar } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { UserOutlined, CloseOutlined } from '@ant-design/icons';\r\nimport style from './index.module.scss';\r\n\r\nexport default function ChatHeader({ name, toggleShowChat }) {\r\n  return (\r\n    <div className={style.chatTitle}>\r\n      <button type=\"button\" className={style.closeButton} onClick={toggleShowChat}>\r\n        <CloseOutlined />\r\n      </button>\r\n      <Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\r\n      <span className={style.chatUserName}>{name}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nChatHeader.propTypes = {\r\n  toggleShowChat: PropTypes.func,\r\n  name: PropTypes.string,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { SendOutlined } from '@ant-design/icons';\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport InputEmoji from 'react-input-emoji';\r\nimport style from './index.module.scss';\r\nimport { AuthContext, SocketContext } from '../../../../utils/contexts';\r\n\r\nexport default function ChatMessage({ isPage, handleSendMessage }) {\r\n  const [message, setMessage] = useState('');\r\n  const { authorized } = useContext(AuthContext);\r\n  const [typingUsers, setTypingUsers] = useState([]);\r\n  const socket = useContext(SocketContext);\r\n  const handleMessageInput = (e) => {\r\n    setMessage(e);\r\n    const { name } = authorized;\r\n    if (e) {\r\n      socket.emit('messageTyping', { name, typing: true });\r\n    } else {\r\n      socket.emit('messageTyping', { name, typing: false });\r\n    }\r\n  };\r\n  const sendMessage = () => {\r\n    setMessage('');\r\n    handleSendMessage(message);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const cleanup = () => {\r\n      const { name } = authorized;\r\n      socket.emit('messageTyping', { name, typing: false });\r\n    };\r\n    window.addEventListener('beforeunload', cleanup);\r\n\r\n    socket.on('typingUsers', (data) => {\r\n      setTypingUsers(data);\r\n    });\r\n    return () => {\r\n      window.removeEventListener('beforeunload', cleanup);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`${style.chatMessage} ${isPage ? style.chatMessagePage : ''}`}>\r\n      <span className={style.chatMessageTyping}>\r\n        {typingUsers.map((user, index) => `${index ? ', ' : ''} ${user}`)}\r\n        {' '}\r\n        {typingUsers.length ? ' набирає повідомлення...' : ''}\r\n      </span>\r\n      <div className={style.chatMessageRow} id=\"message\">\r\n        <InputEmoji\r\n          onEnter={sendMessage}\r\n          onChange={handleMessageInput}\r\n          value={message}\r\n          fontFamily=\"Nunito\"\r\n          height={40}\r\n          placeholder=\"Напишіть повідомлення\"\r\n        />\r\n        <button onClick={sendMessage} disabled={!message.length} className={style.chatMessageButton} type=\"submit\">\r\n          <SendOutlined />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nChatMessage.propTypes = {\r\n  handleSendMessage: PropTypes.func,\r\n  isPage: PropTypes.bool,\r\n};\r\n","import axios from 'axios';\r\nimport { getCookie } from '../helpers/authHelper';\r\n\r\nexport const getMessages = async () => {\r\n  const token = getCookie('JWToken');\r\n  return await axios.get(`${process.env.REACT_APP_LOCAL_API}/chat`, {\r\n    headers: {\r\n      Authorization: token,\r\n    },\r\n  });\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useState, useContext, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { Divider } from 'antd';\r\nimport ChatHeader from '../ChatHeader';\r\nimport ChatMessage from '../ChatMessage';\r\nimport { AuthContext, SocketContext } from '../../../../utils/contexts';\r\nimport { getMessages } from '../../../../api/chat';\r\nimport style from './index.module.scss';\r\n\r\nexport default function ChatList({ isPage, setUnreadedMessages, toggleShowChat }) {\r\n  const socket = useContext(SocketContext);\r\n  const [messages, setMessages] = useState([]);\r\n  const { authorized } = useContext(AuthContext);\r\n  useEffect(async () => {\r\n    await getMessages()\r\n      .then((res) => {\r\n        if (res.status === 200) {\r\n          setMessages(res.data);\r\n          window.localStorage.setItem('messages', JSON.stringify(res.data));\r\n          const chat = document.getElementById('chat-list');\r\n          chat.scrollTo(0, chat.scrollHeight);\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.error(e.message);\r\n      });\r\n  }, []);\r\n\r\n  const handleSendMessage = (message) => {\r\n    socket.emit('chatMessage', message);\r\n    const newMessage = {\r\n      id: new Date().getTime(),\r\n      message,\r\n      user: {\r\n        id: authorized.id,\r\n        name: authorized.name,\r\n      },\r\n    };\r\n    const oldMsg = [...messages];\r\n    oldMsg[messages.length - 1].days.push(newMessage);\r\n    setMessages(oldMsg);\r\n    setTimeout(() => {\r\n      const chat = document.getElementById('chat-list');\r\n      chat.scrollTo(0, chat.scrollHeight);\r\n    }, 100);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n    socket.on('message', (msg) => {\r\n      setUnreadedMessages(true);\r\n      setMessages((prevState) => {\r\n        const oldMsg = [...prevState];\r\n        oldMsg[prevState.length - 1].days.push(msg);\r\n        return oldMsg;\r\n      });\r\n      setTimeout(() => {\r\n        const chat = document.getElementById('chat-list');\r\n        chat.scrollTo(0, chat.scrollHeight);\r\n      }, 100);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setUnreadedMessages(false);\r\n    document.documentElement.style.overflow = 'hidden';\r\n    return () => {\r\n      document.documentElement.style.overflow = 'unset';\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={style.chat}>\r\n      {!isPage && (\r\n        <ChatHeader name={authorized.name} toggleShowChat={toggleShowChat} />\r\n      )}\r\n      <ul id=\"chat-list\" className={`${style.chatList} ${isPage ? style.chatListPage : ''}`}>\r\n        {messages.map((day) => (\r\n          <div key={day.id}>\r\n            <Divider style={{ fontWeight: 'bold' }}>{moment(day.date).format('LL')}</Divider>\r\n            {\r\n              day.days.map((item) => (\r\n                <li className={`${style.chatListMessage} ${item.user.id === authorized.id ? style.chatListMessageMy : ''}`} key={item.id}>\r\n                  <div className={style.chatListWrapper}>\r\n                    <div className={style.chatListWrap}>\r\n                      {item.user.id !== authorized.id && (\r\n                        <div className={style.chatListName}>{item.user.name}</div>\r\n                      )}\r\n                      <div className={style.chatListText}>\r\n                        {item.message}\r\n                        <span className={style.chatListTime}>{moment(item.createdAt).format('HH:mm')}</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n              ))\r\n            }\r\n          </div>\r\n        ))}\r\n      </ul>\r\n      <ChatMessage isPage handleSendMessage={handleSendMessage} />\r\n    </div>\r\n  );\r\n}\r\nChatList.propTypes = {\r\n  toggleShowChat: PropTypes.func,\r\n  setUnreadedMessages: PropTypes.func,\r\n  isPage: PropTypes.bool,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport { Badge } from 'antd';\r\nimport { MessageOutlined } from '@ant-design/icons';\r\nimport ChatList from './subcomponents/ChatList';\r\nimport style from './index.module.scss';\r\n\r\nexport default function Chat({ isPage }) {\r\n  const [showChat, setShowChat] = useState(!!isPage);\r\n  const [unreadedMessages, setUnreadedMessages] = useState(false);\r\n\r\n  const toggleShowChat = () => {\r\n    setShowChat(!showChat);\r\n  };\r\n  return (\r\n    <>\r\n      {!showChat ? (\r\n        <div className={style.button}>\r\n          <button onClick={toggleShowChat} type=\"button\">\r\n            <Badge size=\"default\" dot={unreadedMessages}>\r\n              <MessageOutlined style={{ color: '#fff', fontSize: '25px' }} />\r\n            </Badge>\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <ChatList\r\n          isPage={isPage}\r\n          setUnreadedMessages={setUnreadedMessages}\r\n          toggleShowChat={toggleShowChat}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nChat.propTypes = {\r\n  isPage: PropTypes.bool,\r\n};\r\n","import Chat from '../../components/Chat';\r\n\r\nexport default function ChatPage() {\r\n  return (\r\n    <Chat isPage />\r\n  );\r\n}\r\n"],"sourceRoot":""}